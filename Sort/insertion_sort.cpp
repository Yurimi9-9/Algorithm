// 정렬 - 삽입 정렬 ( a[0]~a[i-1]까지 정렬된 상태에서 a[i]까지 포함하여 정렬하는 알고리즘 )
void insertionSort(int a[], int n)
{
	int i, j;
	for(i=1; i<n; i++)			// a[1]부터 차례로 삽입하여 정렬
	{
		int temp = a[i];		// 정렬할 원소를 temp에 저장 (a[0]~a[i-1]은 정렬된 상태)
		for(j=i-1; j>=0; j--)
		{
			if(a[j] > temp)		// 삽입할 a[i]보다 큰 원소가 있다면,
				a[j+1] = a[j];	// 한 칸씩 뒤로 밀어주기
			else				// 앞의 원소들은 정렬 상태이므로, a[i]가 더 크다면
				break;			// 비교를 중단하고
		}
		a[j+1] = temp;			// 그 자리에 원소 삽입
	}
}
// 시간 복잡도 W(n) = O(n²)		역순으로 정렬된 입력
// 시간 복잡도 B(n) = O(n)  	정렬된 입력
// 시간 복잡도 A(n) = O(n²)

/*
 *  [ 코드 맨 마지막 줄 - a[j]가 아닌 a[j+1]에 원소를 삽입하는 이유 ]
 *
 *  for문의 증감식은 j--인데, 이는 한 루프가 끝낼 때마다 자동으로 실행된다.
 *  roop 속에서 찾았던 a[i]의 삽입 인덱스 j는 for루프가 끝나면서 j-1로 감소한다.
 *  따라서 인덱스가 j-1의 위치로 변경되었으므로, for문 밖에서의 알맞은 삽입 위치는 j+1이다.
 */
